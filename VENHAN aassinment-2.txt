                                                                                       VENHAN aassinment-2


from datetime import datetime, timedelta

class Book:
    def __init__(self, title, author, isbn, genre, quantity):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.genre = genre
        self.quantity = quantity

    def update_info(self, title=None, author=None, quantity=None):
        if title:
            self.title = title
        if author:
            self.author = author
        if quantity is not None:
            self.quantity = quantity

    def __str__(self):
        return f"{self.title} by {self.author} (ISBN: {self.isbn}) - {self.genre}, Copies: {self.quantity}"

class Borrower:
    def __init__(self, name, contact_details, membership_id):
        self.name = name
        self.contact_details = contact_details
        self.membership_id = membership_id

    def update_info(self, name=None, contact_details=None):
        if name:
            self.name = name
        if contact_details:
            self.contact_details = contact_details

    def __str__(self):
        return f"{self.name} (Membership ID: {self.membership_id}) - Contact: {self.contact_details}"



class Library:
    def __init__(self):
        self.books = {}
        self.borrowers = {}
        self.borrowed_books = {}

    def add_book(self, book):
        self.books[book.isbn] = book

    def update_book(self, isbn, title=None, author=None, quantity=None):
        if isbn in self.books:
            self.books[isbn].update_info(title, author, quantity)

    def remove_book(self, isbn):
        if isbn in self.books:
            del self.books[isbn]

    def add_borrower(self, borrower):
        self.borrowers[borrower.membership_id] = borrower

    def update_borrower(self, membership_id, name=None, contact_details=None):
        if membership_id in self.borrowers:
            self.borrowers[membership_id].update_info(name, contact_details)

    def remove_borrower(self, membership_id):
        if membership_id in self.borrowers:
            del self.borrowers[membership_id]

    def borrow_book(self, membership_id, isbn):
        if membership_id in self.borrowers and isbn in self.books and self.books[isbn].quantity > 0:
            self.books[isbn].quantity -= 1
            due_date = datetime.now() + timedelta(days=14)
            self.borrowed_books[(membership_id, isbn)] = due_date
            print(f"Book borrowed successfully. Due date: {due_date}")
        else:
            print("Borrowing failed. Check membership ID, ISBN, or book availability.")

    def return_book(self, membership_id, isbn):
        if (membership_id, isbn) in self.borrowed_books:
            self.books[isbn].quantity += 1
            del self.borrowed_books[(membership_id, isbn)]
            print("Book returned successfully.")
        else:
            print("Return failed. Check membership ID and ISBN.")

    def search_books(self, title=None, author=None, genre=None):
        results = []
        for book in self.books.values():
            if (title and title in book.title) or (author and author in book.author) or (genre and genre in book.genre):
                results.append(book)
        return results

    def show_availability(self, isbn):
        if isbn in self.books:
            book = self.books[isbn]
            return f"{book.title} by {book.author} - Copies available: {book.quantity}"
        return "Book not found."


if __name__ == "__main__":
    library = Library()

    # Adding books
    book1 = Book("The Great Gatsby", "F. Scott Fitzgerald", "1234567890", "Fiction", 5)
    book2 = Book("To Kill a Mockingbird", "Harper Lee", "0987654321", "Fiction", 3)
    library.add_book(book1)
    library.add_book(book2)

    # Adding borrowers
    borrower1 = Borrower("Narasimha", "narasimhakaku99@gmail.com", "1")
    borrower2 = Borrower("Naveen", "naveensmart@gmail.com", "2")
    library.add_borrower(borrower1)
    library.add_borrower(borrower2)

    # Borrowing books
    library.borrow_book("1", "1234567890")
    library.borrow_book("2", "0987654321")

    # Returning books
    library.return_book("1", "1234567890")

    # Searching books
    search_results = library.search_books(title="The Great Gatsby")
    for book in search_results:
        print(book)

    # Showing availability
    print(library.show_availability("1234567890"))
